package topics

import kotlinx.coroutines.*

/**
 * Асинхронность и параллельные вычисления
 * Корутина - блок кода, который может выполняться параллельно с остальным кодом
 * Базовая функциональность - в библиотеке kotlinx.coroutines
 * Модификатор ___suspend___ определяет функцию, которая может приостановить свое выполнение и возобновить его через некоторый период времени
 * Сама функция delay() тоже является подобной функцией, которая определена с модификатором suspend.
 * А любая функция с модификатором suspend может вызываться либо из другой функции, которая тоже имеет модификатор suspend, либо из корутины.
 *
 * Функция coroutineScope() - создает контекст корутины. (возможно только в функции с модификатором suspend)
 * Функция launch - построитель корутин. (создает корутину в виде блока кода и запускает эту корутину параллельно с остальным кодом)
 */

// Без корутины
suspend fun main(){
    for(i in 0..5){
        delay(400L)
        println(i)
    }

    println("Hello Coroutines")
}


// Вынесем продолжительную работу - то есть цикл в корутину
suspend fun main1() = coroutineScope{
    launch{
        for(i in 0..5){
            delay(400L) // на 400 миллисекунд выполняется задержка
            println(i)
        }
    }

    println("Hello Coroutines")
}


// Вынесение кода корутин в отдельную функцию
suspend fun main2()= coroutineScope{
    launch{ doWork() }

    println("Hello Coroutines")
}
suspend fun doWork(){
    for(i in 0..5){
        println(i)
        delay(400L)
    }
}